<!DOCTYPE html>
<!-- saved from url=(0066)https://gradeit.cs.washington.edu/uwcse373//turnin/code/turnin.php -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		<meta charset="utf-8">
		
		<title>Homework Turnin</title>
		<style type="text/css">
/* Grade-It homework turnin page style sheet */

a {
	color: #aa4400;
	text-decoration: none;
}

a:hover {
	background-color: #FFFF99;
	text-decoration: underline;
}

a img {
	border-width: 0;
}

.aside {
	font-size: small;
}

body {
	background-color: #ffffff;
	color: #000000;
	font-family: "Lucida Grande", "Lucida Sans Unicode", "Lucida", "Helvetica Neue", "Helvetica", Verdana, Arial, sans-serif;
	font-size: 10pt;
	padding: 1em;
}

#cheatpolicyexplain {
	color: #800;
	font-weight: bold;
}

.cheatwarning {
	text-indent: -2em;
	margin-left: 3em;
}

.deemphasized {
	color: #666666;
}

dt {
	font-weight: bold;
}

.emphasized {
	font-weight: bold;
}

.error, .errorfixed {
	background-color: #FFFFDD;
	border: thin solid gray;
	font-weight: bold;
}

.error {
	color: red;
}

.errorfixed {
	color: #000099;
}

#errormessage, .error, #warningmessage, .warning {
	font-size: 110%;
	padding-left: 1em;
	padding-right: 1em;
	padding-top: 0.5em;
	padding-bottom: 0.5em;
	margin: 1em;
}

#errormessage, .error {
	background-color: #ffe8e8;
	border: 3px solid #777777;
	color: red;
	font-size: larger;
}

.excitingnews {
	background-color: #eeeeff;
	border: 2px dashed #00AA00;
	overflow: hidden;
	padding-left: 1em;
	padding-right: 1em;
}

.filename {
	text-decoration: none;
}

form, #main {
	padding-top: 1em;
	padding-left: 1em;
	padding-right: 1em;
	margin-left: auto;
	margin-right: auto;
	max-width: 70em;
}

form td, form th {
	padding-top: 0.3em;
}

h1 {
	margin: 0em;
	/* margin-top: 0.25em; */
	padding-top: 0.25em;
}

.highlight {
	background-color: yellow;
}

img {
	vertical-align: bottom;
}

img.icon {
	height: 16px;
	width: 16px;
	vertical-align: baseline;
}

img.imageicon, img.sidebaricon {
	border: none;
	height: 16px;
	width: 16px;
	vertical-align: middle;
}

.leftcolumn {
	padding-right: 20px;
	text-align: left;
	vertical-align: top;
	width: 150px;
}

#loading {
	display: none;
}

.noteslist li {
	margin-bottom: 0.5em;
}

.saveforyourrecords {
	background-color: #ffc;
	border: 1px dashed red;
	padding: 0.5em;
}

.separated {
	padding-bottom: 2em;
}

.separatedtop {
	padding-top: 2em;
}

.success {
	color: #070;
	font-size: 200%;
	font-weight: bold;
}

.acceptedproblems {
	color: #730;
	font-size: 200%;
	font-weight: bold;
}

table {
	margin: 0px;
	padding: 0px;
	border-width: 0px;
	color: #000000;
	font-family: Verdana, Geneva, Arial, Helvetica, sans-serif;
}

td, th {
	vertical-align: top;
	white-space: nowrap;
}

td.spaced {
	padding-right: 20px;
}

tr.evenrow {
	background-color: #EEEEEE;
}

.turninlink {
	background-color: #EEEEEE;
	border: 2px solid #CCCCCC;
	float: right;
	margin-right: 1em;
	padding: 0.5em;
}

.urgent {
	color: #990000;
	font-weight: bold;
}

/* ------------------- */
button:hover, input[type="submit"]:hover {
	color: #666600;
}

h1 {
	padding: 0em;
	padding-top: 0.25em;
	text-align: center;
}

h2 {
	line-height: 16pt;
}

h2.spaced {
	margin-top: 2em;
}

.invalid {
	background-color: #ffff00;
}

#warningmessage, .warning {
	background-color: #fff8dd;
	border: 3px solid rgb(125, 85, 0) /* rgb(205, 135, 0) */;
	color: rgb(125, 85, 0);
	font-size: larger;
}

#errormessage p, #warningmessage p, .warning p {
	margin-top: 0.25em;
	margin-bottom: 0.25em;
}

.failure {
	color: red;
	font-weight: bold;
}

.filename {
	font-family: monospace;
}

hr {
	margin-top: 2em;
}

input[type="submit"] {
	font-family: Arial, sans-serif;
	font-size: 18pt;
	font-weight: bold;
	padding-left: 2em;
	padding-right: 2em;
}

.nametable {
	 border: none;
	 border-collapse: collapse;
	 margin: 0em;
	 padding: 0em;
}

.nametable td, .nametable th, td.filename {
	padding-right: 0.5em;
}

#submitarea {
	margin-bottom: 2em;
	margin-top: 2em;
	text-align: center;
}

.surveyarea, .tabcell {
	display: none;
}

th {
	padding-right: 2em;
	text-align: left;
}

/* */
body, html {
	margin: 0;
	padding: 0;
}

.codefile {
	border: 2px solid #2F6FAB;
	margin-bottom: 1em;
	padding: 0;
}

.codefile h2 {
	background-color: #2F6FAB;
	color: white;
	margin: 0;
	padding: 0 0.5em 0.25em;
}

.codefile pre, .codefile xmp {
	background-color: #F9F9F9;
	line-height: 1.05em;
	margin: 0;
	padding: 0.75em;
	overflow: auto;
}

.columnlabel {
	float: left;
	font-weight: bold;
	width: 9em;
}

.errormessage, .warningmessage {
	background-color: #FFEEEE;
	border: 2px dashed red;
	margin-left: 2em;
	margin-right: 2em;
	padding-left: 1em;
	padding-right: 1em;
	padding-top: 0.5em;
	padding-bottom: 0.5em;
}

.errormessage h2, .warningmessage h2 {
	color: red;
	font-size: larger;
}

.errormessage pre {
	font-size: larger;
	font-weight: bold;
}

h1 {
	background-color: #EEEEEE;
	border-bottom: 2px solid gray;
	text-align: center;
}

h1, h2, h3 {
	white-space: nowrap;
}

.info {
	text-align: center;
}

#main {
	padding-left: 1em;
	padding-right: 1em;
}

#studentinfoheader {
	font-size: 12pt;
	font-weight: normal;
	margin-left: auto;
	margin-right: auto;
	min-width: 20em;
	width: 20em;
}

.tooltip {
	background-color: #FFFFAA;
	border: 1px solid #999999;
	margin: 0.5em;
}

.warningmessage {
	background-color: #FFFFDD;
	border: 2px dashed yellow;
	padding-left: 1em;
	padding-right: 1em;
}

/* geshi styles */
.codefile .imp {font-weight: bold; color: red;}
.codefile li, .codefile .li1 {font-weight: normal; vertical-align:top;}
.codefile .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.codefile .li2 {font-weight: bold; vertical-align:top;}
.codefile .kw1 {color: #000088; font-weight: bold;}
.codefile .kw2 {color: #000088; font-weight: bold;}
.codefile .kw1 {color: #000000;  font-weight: bold;}
.codefile .kw2 {color: #000000; font-weight: bold;}
.codefile .kw3 {color: #006600; font-weight: bold;}
.codefile .kw4 {color: #006600; font-weight: bold;}
.codefile .kw5 {color: #003399; font-weight: bold;}
.codefile .kw6 {color: #003399; font-weight: bold;}
.codefile .kw7 {color: #003399; font-weight: bold;}
.codefile .kw8 {color: #003399; font-weight: bold;}
.codefile .kw9 {color: #003399; font-weight: bold;}
.codefile .kw10 {color: #003399; font-weight: bold;}
.codefile .kw11 {color: #003399; font-weight: bold;}
.codefile .kw12 {color: #003399; font-weight: bold;}
.codefile .kw13 {color: #003399; font-weight: bold;}
.codefile .kw14 {color: #003399; font-weight: bold;}
.codefile .kw15 {color: #003399; font-weight: bold;}
.codefile .kw16 {color: #003399; font-weight: bold;}
.codefile .kw17 {color: #003399; font-weight: bold;}
.codefile .kw18 {color: #003399; font-weight: bold;}
.codefile .kw19 {color: #003399; font-weight: bold;}
.codefile .kw20 {color: #003399; font-weight: bold;}
.codefile .kw21 {color: #003399; font-weight: bold;}
.codefile .kw22 {color: #003399; font-weight: bold;}
.codefile .kw23 {color: #003399; font-weight: bold;}
.codefile .kw24 {color: #003399; font-weight: bold;}
.codefile .kw25 {color: #003399; font-weight: bold;}
.codefile .kw26 {color: #003399; font-weight: bold;}
.codefile .kw27 {color: #003399; font-weight: bold;}
.codefile .kw28 {color: #003399; font-weight: bold;}
.codefile .kw29 {color: #003399; font-weight: bold;}
.codefile .kw30 {color: #003399; font-weight: bold;}
.codefile .kw31 {color: #003399; font-weight: bold;}
.codefile .kw32 {color: #003399; font-weight: bold;}
.codefile .kw33 {color: #003399; font-weight: bold;}
.codefile .kw34 {color: #003399; font-weight: bold;}
.codefile .kw35 {color: #003399; font-weight: bold;}
.codefile .kw36 {color: #003399; font-weight: bold;}
.codefile .kw37 {color: #003399; font-weight: bold;}
.codefile .kw38 {color: #003399; font-weight: bold;}
.codefile .kw39 {color: #003399; font-weight: bold;}
.codefile .kw40 {color: #003399; font-weight: bold;}
.codefile .kw41 {color: #003399; font-weight: bold;}
.codefile .kw42 {color: #003399; font-weight: bold;}
.codefile .kw43 {color: #003399; font-weight: bold;}
.codefile .kw44 {color: #003399; font-weight: bold;}
.codefile .kw45 {color: #003399; font-weight: bold;}
.codefile .kw46 {color: #003399; font-weight: bold;}
.codefile .kw47 {color: #003399; font-weight: bold;}
.codefile .kw48 {color: #003399; font-weight: bold;}
.codefile .kw49 {color: #003399; font-weight: bold;}
.codefile .kw50 {color: #003399; font-weight: bold;}
.codefile .kw51 {color: #003399; font-weight: bold;}
.codefile .kw52 {color: #003399; font-weight: bold;}
.codefile .kw53 {color: #003399; font-weight: bold;}
.codefile .kw54 {color: #003399; font-weight: bold;}
.codefile .kw55 {color: #003399; font-weight: bold;}
.codefile .kw56 {color: #003399; font-weight: bold;}
.codefile .kw57 {color: #003399; font-weight: bold;}
.codefile .kw58 {color: #003399; font-weight: bold;}
.codefile .kw59 {color: #003399; font-weight: bold;}
.codefile .kw60 {color: #003399; font-weight: bold;}
.codefile .kw61 {color: #003399; font-weight: bold;}
.codefile .kw62 {color: #003399; font-weight: bold;}
.codefile .kw63 {color: #003399; font-weight: bold;}
.codefile .kw64 {color: #003399; font-weight: bold;}
.codefile .kw65 {color: #003399; font-weight: bold;}
.codefile .kw66 {color: #003399; font-weight: bold;}
.codefile .kw67 {color: #003399; font-weight: bold;}
.codefile .kw68 {color: #003399; font-weight: bold;}
.codefile .kw69 {color: #003399; font-weight: bold;}
.codefile .kw70 {color: #003399; font-weight: bold;}
.codefile .kw71 {color: #003399; font-weight: bold;}
.codefile .kw72 {color: #003399; font-weight: bold;}
.codefile .kw73 {color: #003399; font-weight: bold;}
.codefile .kw74 {color: #003399; font-weight: bold;}
.codefile .kw75 {color: #003399; font-weight: bold;}
.codefile .kw76 {color: #003399; font-weight: bold;}
.codefile .kw77 {color: #003399; font-weight: bold;}
.codefile .kw78 {color: #003399; font-weight: bold;}
.codefile .kw79 {color: #003399; font-weight: bold;}
.codefile .kw80 {color: #003399; font-weight: bold;}
.codefile .kw81 {color: #003399; font-weight: bold;}
.codefile .kw82 {color: #003399; font-weight: bold;}
.codefile .kw83 {color: #003399; font-weight: bold;}
.codefile .kw84 {color: #003399; font-weight: bold;}
.codefile .kw85 {color: #003399; font-weight: bold;}
.codefile .kw86 {color: #003399; font-weight: bold;}
.codefile .kw87 {color: #003399; font-weight: bold;}
.codefile .kw88 {color: #003399; font-weight: bold;}
.codefile .kw89 {color: #003399; font-weight: bold;}
.codefile .kw90 {color: #003399; font-weight: bold;}
.codefile .kw91 {color: #003399; font-weight: bold;}
.codefile .kw92 {color: #003399; font-weight: bold;}
.codefile .kw93 {color: #003399; font-weight: bold;}
.codefile .kw94 {color: #003399; font-weight: bold;}
.codefile .kw95 {color: #003399; font-weight: bold;}
.codefile .kw96 {color: #003399; font-weight: bold;}
.codefile .kw97 {color: #003399; font-weight: bold;}
.codefile .kw98 {color: #003399; font-weight: bold;}
.codefile .kw99 {color: #003399; font-weight: bold;}
.codefile .kw100 {color: #003399; font-weight: bold;}
.codefile .kw101 {color: #003399; font-weight: bold;}
.codefile .kw102 {color: #003399; font-weight: bold;}
.codefile .kw103 {color: #003399; font-weight: bold;}
.codefile .kw104 {color: #003399; font-weight: bold;}
.codefile .kw105 {color: #003399; font-weight: bold;}
.codefile .kw106 {color: #003399; font-weight: bold;}
.codefile .kw107 {color: #003399; font-weight: bold;}
.codefile .kw108 {color: #003399; font-weight: bold;}
.codefile .kw109 {color: #003399; font-weight: bold;}
.codefile .kw110 {color: #003399; font-weight: bold;}
.codefile .kw111 {color: #003399; font-weight: bold;}
.codefile .kw112 {color: #003399; font-weight: bold;}
.codefile .kw113 {color: #003399; font-weight: bold;}
.codefile .kw114 {color: #003399; font-weight: bold;}
.codefile .kw115 {color: #003399; font-weight: bold;}
.codefile .kw116 {color: #003399; font-weight: bold;}
.codefile .kw117 {color: #003399; font-weight: bold;}
.codefile .kw118 {color: #003399; font-weight: bold;}
.codefile .kw119 {color: #003399; font-weight: bold;}
.codefile .kw120 {color: #003399; font-weight: bold;}
.codefile .kw121 {color: #003399; font-weight: bold;}
.codefile .kw122 {color: #003399; font-weight: bold;}
.codefile .kw123 {color: #003399; font-weight: bold;}
.codefile .kw124 {color: #003399; font-weight: bold;}
.codefile .kw125 {color: #003399; font-weight: bold;}
.codefile .kw126 {color: #003399; font-weight: bold;}
.codefile .kw127 {color: #003399; font-weight: bold;}
.codefile .kw128 {color: #003399; font-weight: bold;}
.codefile .kw129 {color: #003399; font-weight: bold;}
.codefile .kw130 {color: #003399; font-weight: bold;}
.codefile .kw131 {color: #003399; font-weight: bold;}
.codefile .kw132 {color: #003399; font-weight: bold;}
.codefile .kw133 {color: #003399; font-weight: bold;}
.codefile .kw134 {color: #003399; font-weight: bold;}
.codefile .kw135 {color: #003399; font-weight: bold;}
.codefile .kw136 {color: #003399; font-weight: bold;}
.codefile .kw137 {color: #003399; font-weight: bold;}
.codefile .kw138 {color: #003399; font-weight: bold;}
.codefile .kw139 {color: #003399; font-weight: bold;}
.codefile .kw140 {color: #003399; font-weight: bold;}
.codefile .kw141 {color: #003399; font-weight: bold;}
.codefile .kw142 {color: #003399; font-weight: bold;}
.codefile .kw143 {color: #003399; font-weight: bold;}
.codefile .kw144 {color: #003399; font-weight: bold;}
.codefile .kw145 {color: #003399; font-weight: bold;}
.codefile .kw146 {color: #003399; font-weight: bold;}
.codefile .kw147 {color: #003399; font-weight: bold;}
.codefile .kw148 {color: #003399; font-weight: bold;}
.codefile .kw149 {color: #003399; font-weight: bold;}
.codefile .kw150 {color: #003399; font-weight: bold;}
.codefile .kw151 {color: #003399; font-weight: bold;}
.codefile .kw152 {color: #003399; font-weight: bold;}
.codefile .kw153 {color: #003399; font-weight: bold;}
.codefile .kw154 {color: #003399; font-weight: bold;}
.codefile .kw155 {color: #003399; font-weight: bold;}
.codefile .kw156 {color: #003399; font-weight: bold;}
.codefile .kw157 {color: #003399; font-weight: bold;}
.codefile .kw158 {color: #003399; font-weight: bold;}
.codefile .kw159 {color: #003399; font-weight: bold;}
.codefile .kw160 {color: #003399; font-weight: bold;}
.codefile .kw161 {color: #003399; font-weight: bold;}
.codefile .kw162 {color: #003399; font-weight: bold;}
.codefile .kw163 {color: #003399; font-weight: bold;}
.codefile .kw164 {color: #003399; font-weight: bold;}
.codefile .kw165 {color: #003399; font-weight: bold;}
.codefile .kw166 {color: #003399; font-weight: bold;}
.codefile .co1,
.codefile .co2,
.codefile .co3,
.codefile .coMULTI {color: #a1a100;}

/*
.codefile .co2 {color: #ff0000; font-style: italic;}
.codefile .co3 {color: #008000; font-style: italic;}
.codefile .coMULTI {color: #808080; font-style: italic;}
*/
.codefile .es0 {color: #000099; font-weight: bold;}
.codefile .es2 {color: #000099; font-weight: bold;}
.codefile .br0 {color: #00AA00;}
.codefile .sy0 {color: #00AA00;}
.codefile .st0 {color: #aa0000;}
.codefile .nu0 {color: #cc66cc;}
.codefile .re0 {color: #cc00cc;}
.codefile .re1 {color: #6666ff;}
.codefile .re2 {color: #3333ff;}
.codefile .re3 {color: #933;}
.codefile .ln-xtra, .codefile li.ln-xtra, .codefile div.ln-xtra {background-color: #ffc;}
.codefile span.xtra { display:block; }
.codefile .sc-2 {color: #404040;}
.codefile .sc-1 {color: #808080; font-style: italic;}
.codefile .sc0 {color: #00bbdd;}
.codefile .sc1 {color: #ddbb00;}
.codefile .sc2 {color: #009900;}
		</style>

		<style type="text/css" media="print">
.codefile {
	border: 1px dashed #2F6FAB;
}

.codefile pre, .codefile xmp {
	font-size: 9pt;
	letter-spacing: -0.5pt;
	line-height: 1em;
	margin: 0;
	padding: 0.25em;
	overflow: hidden;
}

.saveforyourrecords, .tooltip {
	display: none;
}
		</style>
	<style type="text/css"></style></head>

	<body class=" hasGoogleVoiceExt">
		<h1>Homework Turnin</h1>


<div id="main">
	<h2 id="studentinfoheader">
		<span class="columnlabel">Name:</span>
		Shawn		William		Stern		<br>

		<span class="columnlabel">Email:</span>
		swstern@uw.edu		<br>
		
					<span class="columnlabel">Student ID:</span>
			0921475			<br>
		
					<span class="columnlabel">Section:</span>
			A			<br>
		
		<span class="columnlabel">Course:</span>
		CSE 		373		12sp		<br>

		<span class="columnlabel">Assignment:</span>
		HW3	</h2>


	<h2 id="studentinfoheader">
		<span class="columnlabel">Receipt ID:</span>
		c6aa4d2d32b42d777207f2abd37813e9	</h2>


<!--
<div class="warning">
	NOTE: Emailed receipts temporarily disabled because of a server problem.  Please save a copy of this web page because you won't be receiving a receipt email.
</div>
-->

	
	<h3 class="success">Turnin Successful!</h3>

	<p class="saveforyourrecords">
		Please <strong style="color: #090; background-color: #ffb">save or print a copy of this page</strong> for your records.  A receipt has also been emailed to you, but you should still save or print a copy of this web page to make certain that you have proof of your turnin.  <strong>If your files become lost or damaged and you do not have any record of your receipt, we will not be able to give you any credit for your work.</strong>
	</p>
	
		
	<p>
		The following file(s) were received:
	</p>

	

		<div class="codefile">
			<h2>
				DualSelectionSort.java &nbsp; &nbsp; 
				<span class="aside">(6839 bytes)</span>
			</h2>
			
			<pre><pre class="java5"><span class="kw2">import</span> <span class="co2">java.util.Arrays</span><span class="sy0">;</span>
<span class="kw2">import</span> <span class="co2">java.util.Random</span><span class="sy0">;</span>
&nbsp;
<span class="co1">// Shawn Stern - 0921475 - CSE 373, Spring 2012 - Homework 3 Part B</span>
&nbsp;
<span class="kw2">public</span> <span class="kw2">class</span> DualSelectionSort <span class="br0">{</span>
&nbsp;
    <span class="kw2">public</span> <span class="kw2">static</span> <span class="kw2">final</span> <span class="kw3">int</span> NUM_SAMPLES = <span class="nu0">10</span><span class="sy0">;</span>
&nbsp;
    <span class="kw2">public</span> <span class="kw2">static</span> <span class="kw3">void</span> main<span class="br0">(</span><span class="kw21">String</span><span class="br0">[</span><span class="br0">]</span> args<span class="br0">)</span> <span class="br0">{</span>
&nbsp;
        <span class="co1">// Tests to determine external correctness before testing timing</span>
        <span class="co1">// -------------------------------------------------------------</span>
<span class="co1">//      int[] test1 = createRandomArray(5);</span>
<span class="co1">//      System.out.println(Arrays.toString(test1));</span>
<span class="co1">//      dualSelectionSort(test1);</span>
<span class="co1">//      System.out.println(Arrays.toString(test1) + " " + isSorted(test1));</span>
<span class="co1">//      </span>
<span class="co1">//      System.out.println();</span>
<span class="co1">//      </span>
<span class="co1">//      int[] test2 = createRandomArray(10);</span>
<span class="co1">//      System.out.println(Arrays.toString(test2));</span>
<span class="co1">//      dualSelectionSort(test2);</span>
<span class="co1">//      System.out.println(Arrays.toString(test2) + " " + isSorted(test2));</span>
<span class="co1">//      </span>
<span class="co1">//      System.out.println();</span>
<span class="co1">//      </span>
<span class="co1">//      int[] test3 = createRandomArray(13);</span>
<span class="co1">//      System.out.println(Arrays.toString(test3));</span>
<span class="co1">//      dualSelectionSort(test3);</span>
<span class="co1">//      System.out.println(Arrays.toString(test3) + " " + isSorted(test3));</span>
<span class="co1">//      </span>
<span class="co1">//      System.out.println();</span>
<span class="co1">//      </span>
<span class="co1">//      int[] test4 = createRandomArray(100);</span>
<span class="co1">//      System.out.println(Arrays.toString(test4));</span>
<span class="co1">//      dualSelectionSort(test4);</span>
<span class="co1">//      System.out.println(Arrays.toString(test4) + " " + isSorted(test4));</span>
<span class="co1">//      </span>
<span class="co1">//      System.out.println();</span>
<span class="co1">//      </span>
<span class="co1">//      int[] test5 = createRandomArray(1000);</span>
<span class="co1">//      System.out.println(Arrays.toString(test5));</span>
<span class="co1">//      dualSelectionSort(test5);</span>
<span class="co1">//      System.out.println(Arrays.toString(test5) + " " + isSorted(test5));</span>
<span class="co1">//      </span>
<span class="co1">//      System.out.println();</span>
<span class="co1">//      </span>
<span class="co1">//      int[] test6 = createRandomArray(0);</span>
<span class="co1">//      System.out.println(Arrays.toString(test6));</span>
<span class="co1">//      dualSelectionSort(test6);</span>
<span class="co1">//      System.out.println(Arrays.toString(test6) + " " + isSorted(test6));</span>
&nbsp;
        <span class="co1">// -------------------------------------------------------------</span>
&nbsp;
&nbsp;
        <span class="co1">// Timing Tests</span>
        <span class="co1">// -------------------------------------------------------------</span>
        test<span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span><span class="sy0">;</span>
        test<span class="br0">(</span><span class="nu0">10</span><span class="br0">)</span><span class="sy0">;</span>
        test<span class="br0">(</span><span class="nu0">100</span><span class="br0">)</span><span class="sy0">;</span>
        test<span class="br0">(</span><span class="nu0">1000</span><span class="br0">)</span><span class="sy0">;</span>
        test<span class="br0">(</span><span class="nu0">10000</span><span class="br0">)</span><span class="sy0">;</span>
        <span class="co1">//test(25000);</span>
        <span class="co1">//test(50000);</span>
&nbsp;
        <span class="co1">// -------------------------------------------------------------</span>
    <span class="br0">}</span>
&nbsp;
    <span class="co1">// Accepts an array of integers and sorts it in ascending order from least to greatest.</span>
    <span class="kw2">public</span> <span class="kw2">static</span> <span class="kw3">void</span> dualSelectionSort<span class="br0">(</span><span class="kw3">int</span><span class="br0">[</span><span class="br0">]</span> array<span class="br0">)</span> <span class="br0">{</span>
        <span class="co1">// Figure out initial length of the array to be sorted</span>
        <span class="kw3">int</span> length = array.<span class="me1">length</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// Sort should take length/2 iterations to sort, so that's the limit of the loop.</span>
        <span class="kw1">for</span> <span class="br0">(</span><span class="kw3">int</span> i = <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> length / <span class="nu0">2</span><span class="sy0">;</span> i++<span class="br0">)</span> <span class="br0">{</span>
&nbsp;
            <span class="co1">// Set min and max to the start of the sorted section, since they haven't</span>
            <span class="co1">// been determined yet</span>
            <span class="kw3">int</span> min = i, max = i<span class="sy0">;</span>
&nbsp;
            <span class="co1">// Iterate over the array to find the min and max indices</span>
            <span class="kw1">for</span> <span class="br0">(</span><span class="kw3">int</span> j = i<span class="sy0">;</span> j <span class="sy0">&lt;</span> length - i<span class="sy0">;</span> j++<span class="br0">)</span> <span class="br0">{</span>
                <span class="kw1">if</span> <span class="br0">(</span>array<span class="br0">[</span>j<span class="br0">]</span> <span class="sy0">&lt;</span> array<span class="br0">[</span>min<span class="br0">]</span><span class="br0">)</span> <span class="br0">{</span>
                    min = j<span class="sy0">;</span>
                <span class="br0">}</span>
&nbsp;
                <span class="kw1">if</span> <span class="br0">(</span>array<span class="br0">[</span>j<span class="br0">]</span> <span class="sy0">&gt;</span> array<span class="br0">[</span>max<span class="br0">]</span><span class="br0">)</span> <span class="br0">{</span>
                    max = j<span class="sy0">;</span>
                <span class="br0">}</span>               
            <span class="br0">}</span>
&nbsp;
            <span class="co1">// Swap the smallest element in the array with the smallest index that</span>
            <span class="co1">// is still unsorted</span>
            swap<span class="br0">(</span>array, i, min<span class="br0">)</span><span class="sy0">;</span>
&nbsp;
            <span class="co1">// If max and min indices are the same, the previous swap just swapped the min</span>
            <span class="co1">// and max so that the largest value is at the front of the sorted section! </span>
            <span class="kw1">if</span> <span class="br0">(</span>max == i<span class="br0">)</span> <span class="br0">{</span>
                <span class="co1">// Swap them so that the max is where it belongs!</span>
                swap<span class="br0">(</span>array, length - <span class="nu0">1</span> - i, min<span class="br0">)</span><span class="sy0">;</span>
            <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span>
                <span class="co1">// Otherwise, swap the largest element with the last unsorted index in the array</span>
                swap<span class="br0">(</span>array, length - <span class="nu0">1</span> - i, max<span class="br0">)</span><span class="sy0">;</span>
            <span class="br0">}</span>
&nbsp;
            <span class="co1">// Just for testing so I can see the sorting in progress</span>
            <span class="co1">//System.out.println(Arrays.toString(array));   </span>
        <span class="br0">}</span>
    <span class="br0">}</span>
&nbsp;
    <span class="co1">// Swap two elements in an array</span>
    <span class="co1">// Code provided by instructor</span>
    <span class="kw2">private</span> <span class="kw2">static</span> <span class="kw3">void</span> swap<span class="br0">(</span><span class="kw3">int</span><span class="br0">[</span><span class="br0">]</span> nums, <span class="kw3">int</span> i, <span class="kw3">int</span> j<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw1">if</span> <span class="br0">(</span>i == j<span class="br0">)</span> <span class="br0">{</span>
            <span class="kw2">return</span><span class="sy0">;</span>
        <span class="br0">}</span>
&nbsp;
        <span class="kw3">int</span> temp = nums<span class="br0">[</span>i<span class="br0">]</span><span class="sy0">;</span>
        nums<span class="br0">[</span>i<span class="br0">]</span> = nums<span class="br0">[</span>j<span class="br0">]</span><span class="sy0">;</span>
        nums<span class="br0">[</span>j<span class="br0">]</span> = temp<span class="sy0">;</span>
    <span class="br0">}</span>
&nbsp;
    <span class="co1">// Returns true if array a's elements are in sorted order.</span>
    <span class="co1">// Code provided by instructor</span>
    <span class="kw2">private</span> <span class="kw2">static</span> <span class="kw3">boolean</span> isSorted<span class="br0">(</span><span class="kw3">int</span><span class="br0">[</span><span class="br0">]</span> a<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw1">for</span> <span class="br0">(</span><span class="kw3">int</span> i = <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> a.<span class="me1">length</span> - <span class="nu0">1</span><span class="sy0">;</span> i++<span class="br0">)</span> <span class="br0">{</span>
            <span class="kw1">if</span> <span class="br0">(</span>a<span class="br0">[</span>i<span class="br0">]</span> <span class="sy0">&gt;</span> a<span class="br0">[</span>i+<span class="nu0">1</span><span class="br0">]</span><span class="br0">)</span> <span class="br0">{</span>
                <span class="kw2">return</span> <span class="kw4">false</span><span class="sy0">;</span>
            <span class="br0">}</span>
        <span class="br0">}</span>
&nbsp;
        <span class="kw2">return</span> <span class="kw4">true</span><span class="sy0">;</span>
    <span class="br0">}</span>
&nbsp;
    <span class="co1">// Make an array of randomly generated numbers.</span>
    <span class="co1">// Code provided by instructor</span>
    <span class="kw2">public</span> <span class="kw2">static</span> <span class="kw3">int</span><span class="br0">[</span><span class="br0">]</span> createRandomArray<span class="br0">(</span><span class="kw3">int</span> size<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw3">int</span><span class="br0">[</span><span class="br0">]</span> array = <span class="kw2">new</span> <span class="kw3">int</span><span class="br0">[</span>size<span class="br0">]</span><span class="sy0">;</span>
        <span class="kw46">Random</span> rand = <span class="kw2">new</span> <span class="kw46">Random</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// fill it with random data in [0, size]</span>
        <span class="kw1">for</span> <span class="br0">(</span><span class="kw3">int</span> i = <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> size<span class="sy0">;</span> i++<span class="br0">)</span> <span class="br0">{</span>
            <span class="co1">// pick random numbers (subtract a bit so that some </span>
            <span class="co1">// are negative)</span>
            array<span class="br0">[</span>i<span class="br0">]</span> = rand.<span class="me1">nextInt</span><span class="br0">(</span>size <span class="sy0">*</span> <span class="nu0">3</span><span class="br0">)</span> - size / <span class="nu0">4</span><span class="sy0">;</span>
        <span class="br0">}</span>
&nbsp;
        <span class="kw2">return</span> array<span class="sy0">;</span>
    <span class="br0">}</span>
&nbsp;
    <span class="co1">// Selection sort code from lecture, used to compare against dualSelectionSort</span>
    <span class="kw2">public</span> <span class="kw2">static</span> <span class="kw3">void</span> selectionSort<span class="br0">(</span><span class="kw3">int</span><span class="br0">[</span><span class="br0">]</span> a<span class="br0">)</span> <span class="br0">{</span> 
        <span class="kw1">for</span> <span class="br0">(</span><span class="kw3">int</span> i = <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> a.<span class="me1">length</span><span class="sy0">;</span> i++<span class="br0">)</span> <span class="br0">{</span> 
            <span class="co1">// find index of smallest element </span>
            <span class="kw3">int</span> min = i<span class="sy0">;</span> 
            <span class="kw1">for</span> <span class="br0">(</span><span class="kw3">int</span> j = i + <span class="nu0">1</span><span class="sy0">;</span> j <span class="sy0">&lt;</span> a.<span class="me1">length</span><span class="sy0">;</span> j++<span class="br0">)</span> <span class="br0">{</span> 
                <span class="kw1">if</span> <span class="br0">(</span>a<span class="br0">[</span>j<span class="br0">]</span> <span class="sy0">&lt;</span> a<span class="br0">[</span>min<span class="br0">]</span><span class="br0">)</span> <span class="br0">{</span> 
                    min = j<span class="sy0">;</span> 
                <span class="br0">}</span> 
            <span class="br0">}</span> 
            <span class="co1">// swap smallest element with a[i] </span>
            swap<span class="br0">(</span>a, i, min<span class="br0">)</span><span class="sy0">;</span> 
        <span class="br0">}</span> 
    <span class="br0">}</span>
&nbsp;
    <span class="co1">// Tests the array</span>
    <span class="kw2">public</span> <span class="kw2">static</span> <span class="kw3">void</span> test<span class="br0">(</span><span class="kw3">int</span> n<span class="br0">)</span> <span class="br0">{</span>
        <span class="co1">// Create a random, sorted array to play with</span>
        <span class="kw3">int</span><span class="br0">[</span><span class="br0">]</span> nums1 = createRandomArray<span class="br0">(</span>n<span class="br0">)</span><span class="sy0">;</span>
        <span class="kw3">int</span><span class="br0">[</span><span class="br0">]</span> nums2 = <span class="kw46">Arrays</span>.<span class="me1">copyOf</span><span class="br0">(</span>nums1, nums1.<span class="me1">length</span><span class="br0">)</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// Find average runtime by summing all runtimes and diving by number of runs</span>
        <span class="kw3">double</span> sum1 = <span class="nu0">0</span><span class="sy0">;</span>
        <span class="kw1">for</span> <span class="br0">(</span><span class="kw3">int</span> i = <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> NUM_SAMPLES<span class="sy0">;</span> i++<span class="br0">)</span> <span class="br0">{</span>
            <span class="kw3">long</span> startTime = <span class="kw21">System</span>.<span class="me1">nanoTime</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
            dualSelectionSort<span class="br0">(</span>nums1<span class="br0">)</span><span class="sy0">;</span>
            sum1 += <span class="kw21">System</span>.<span class="me1">nanoTime</span><span class="br0">(</span><span class="br0">)</span> - startTime<span class="sy0">;</span>
        <span class="br0">}</span>
        <span class="kw3">double</span> elapsed1 = sum1 / NUM_SAMPLES<span class="sy0">;</span>
&nbsp;
        <span class="kw3">double</span> sum2 = <span class="nu0">0</span><span class="sy0">;</span>
        <span class="kw1">for</span> <span class="br0">(</span><span class="kw3">int</span> i = <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> NUM_SAMPLES<span class="sy0">;</span> i++<span class="br0">)</span> <span class="br0">{</span>
            <span class="kw3">long</span> startTime = <span class="kw21">System</span>.<span class="me1">nanoTime</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
            selectionSort<span class="br0">(</span>nums2<span class="br0">)</span><span class="sy0">;</span>
            sum2 += <span class="kw21">System</span>.<span class="me1">nanoTime</span><span class="br0">(</span><span class="br0">)</span> - startTime<span class="sy0">;</span>
        <span class="br0">}</span>
        <span class="kw3">double</span> elapsed2 = sum2 / NUM_SAMPLES<span class="sy0">;</span>
&nbsp;
        <span class="co1">// report and return results for both sort types</span>
        <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"for n = "</span> + n + <span class="st0">", time = "</span> + elapsed1 + <span class="st0">"ns - DualSelectionSort"</span><span class="br0">)</span><span class="sy0">;</span>
        <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"for n = "</span> + n + <span class="st0">", time = "</span> + elapsed2 + <span class="st0">"ns - SelectionSort"</span><span class="br0">)</span><span class="sy0">;</span>
        <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
    <span class="br0">}</span>
<span class="br0">}</span>
&nbsp;</pre></pre>
		</div>

		
		<div class="codefile">
			<h2>
				README.txt &nbsp; &nbsp; 
				<span class="aside">(2629 bytes)</span>
			</h2>
			
			<pre>-I used the sizes 0, 10, 100, 1000, and 10000 to compare the runtimes for several different 
orders of magnitude.

---------------------------------------------------------

-Here are some sample outputs from my test program:

RUN 1 
---
for n = 0, time = 90.5ns - DualSelectionSort
for n = 0, time = 120.7ns - SelectionSort

for n = 10, time = 1630.3ns - DualSelectionSort
for n = 10, time = 1298.2ns - SelectionSort

for n = 100, time = 60473.3ns - DualSelectionSort
for n = 100, time = 67658.8ns - SelectionSort

for n = 1000, time = 1007304.1ns - DualSelectionSort
for n = 1000, time = 1020860.1ns - SelectionSort

for n = 10000, time = 5.43796628E7ns - DualSelectionSort
for n = 10000, time = 1.031213024E8ns - SelectionSort

RUN 2
---
for n = 0, time = 211.3ns - DualSelectionSort
for n = 0, time = 120.7ns - SelectionSort

for n = 10, time = 1600.1ns - DualSelectionSort
for n = 10, time = 1268.0ns - SelectionSort

for n = 100, time = 61197.9ns - DualSelectionSort
for n = 100, time = 67447.4ns - SelectionSort

for n = 1000, time = 1000360.2ns - DualSelectionSort
for n = 1000, time = 1021494.0ns - SelectionSort

for n = 10000, time = 5.43909544E7ns - DualSelectionSort
for n = 10000, time = 1.03115989E8ns - SelectionSort

RUN 3
---
for n = 0, time = 150.9ns - DualSelectionSort
for n = 0, time = 151.0ns - SelectionSort

for n = 10, time = 1600.2ns - DualSelectionSort
for n = 10, time = 1358.6ns - SelectionSort

for n = 100, time = 67296.5ns - DualSelectionSort
for n = 100, time = 77833.2ns - SelectionSort

for n = 1000, time = 1019562.0ns - DualSelectionSort
for n = 1000, time = 1042084.6ns - SelectionSort

for n = 10000, time = 5.44036046E7ns - DualSelectionSort
for n = 10000, time = 1.031853383E8ns - SelectionSort

---------------------------------------------------------

dualSelectionSort begins to outperform SelectionSort after the array grows larger
than size 100, and continues to perform better for larger values.

For example, for n = 10 dualSelectionSort is roughly 300ns SLOWER than selectionSort, 
but for n = 1000, dualSelectionSort is about 10,000ns FASTER.

---------------------------------------------------------

While dual selection sort does operate a bit faster than selection sort, it still 
seems to have the same growth rate, even for larger values like 25000 elements and 
beyond (for 25000, both sorts take roughly 10^8 ns to complete, and at 50000 they take
roughly 10^9 ns). Since the order of magnitude is the same for both, it appears they share
the same growth rate and the same Big-Oh (approximately).</pre>
		</div>

		
</div>


	<div id="loading">One moment...</div>
	<pre id="dumptarget"></pre>
	
	
	

	<div id="tc_container" style="display: none" data="ih"></div></body></html>