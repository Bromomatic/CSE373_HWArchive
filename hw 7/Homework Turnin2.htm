<!DOCTYPE html>
<!-- saved from url=(0066)https://gradeit.cs.washington.edu/uwcse373//turnin/code/turnin.php -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		<meta charset="utf-8">
		
		<title>Homework Turnin</title>
		<style type="text/css">
/* Grade-It homework turnin page style sheet */

a {
	color: #aa4400;
	text-decoration: none;
}

a:hover {
	background-color: #FFFF99;
	text-decoration: underline;
}

a img {
	border-width: 0;
}

.aside {
	font-size: small;
}

body {
	background-color: #ffffff;
	color: #000000;
	font-family: "Lucida Grande", "Lucida Sans Unicode", "Lucida", "Helvetica Neue", "Helvetica", Verdana, Arial, sans-serif;
	font-size: 10pt;
	padding: 1em;
}

#cheatpolicyexplain {
	color: #800;
	font-weight: bold;
}

.cheatwarning {
	text-indent: -2em;
	margin-left: 3em;
}

.deemphasized {
	color: #666666;
}

dt {
	font-weight: bold;
}

.emphasized {
	font-weight: bold;
}

.error, .errorfixed {
	background-color: #FFFFDD;
	border: thin solid gray;
	font-weight: bold;
}

.error {
	color: red;
}

.errorfixed {
	color: #000099;
}

#errormessage, .error, #warningmessage, .warning {
	font-size: 110%;
	padding-left: 1em;
	padding-right: 1em;
	padding-top: 0.5em;
	padding-bottom: 0.5em;
	margin: 1em;
}

#errormessage, .error {
	background-color: #ffe8e8;
	border: 3px solid #777777;
	color: red;
	font-size: larger;
}

.excitingnews {
	background-color: #eeeeff;
	border: 2px dashed #00AA00;
	overflow: hidden;
	padding-left: 1em;
	padding-right: 1em;
}

.filename {
	text-decoration: none;
}

form, #main {
	padding-top: 1em;
	padding-left: 1em;
	padding-right: 1em;
	margin-left: auto;
	margin-right: auto;
	max-width: 70em;
}

form td, form th {
	padding-top: 0.3em;
}

h1 {
	margin: 0em;
	/* margin-top: 0.25em; */
	padding-top: 0.25em;
}

.highlight {
	background-color: yellow;
}

img {
	vertical-align: bottom;
}

img.icon {
	height: 16px;
	width: 16px;
	vertical-align: baseline;
}

img.imageicon, img.sidebaricon {
	border: none;
	height: 16px;
	width: 16px;
	vertical-align: middle;
}

.leftcolumn {
	padding-right: 20px;
	text-align: left;
	vertical-align: top;
	width: 150px;
}

#loading {
	display: none;
}

.noteslist li {
	margin-bottom: 0.5em;
}

.saveforyourrecords {
	background-color: #ffc;
	border: 1px dashed red;
	padding: 0.5em;
}

.separated {
	padding-bottom: 2em;
}

.separatedtop {
	padding-top: 2em;
}

.success {
	color: #070;
	font-size: 200%;
	font-weight: bold;
}

.acceptedproblems {
	color: #730;
	font-size: 200%;
	font-weight: bold;
}

table {
	margin: 0px;
	padding: 0px;
	border-width: 0px;
	color: #000000;
	font-family: Verdana, Geneva, Arial, Helvetica, sans-serif;
}

td, th {
	vertical-align: top;
	white-space: nowrap;
}

td.spaced {
	padding-right: 20px;
}

tr.evenrow {
	background-color: #EEEEEE;
}

.turninlink {
	background-color: #EEEEEE;
	border: 2px solid #CCCCCC;
	float: right;
	margin-right: 1em;
	padding: 0.5em;
}

.urgent {
	color: #990000;
	font-weight: bold;
}

/* ------------------- */
button:hover, input[type="submit"]:hover {
	color: #666600;
}

h1 {
	padding: 0em;
	padding-top: 0.25em;
	text-align: center;
}

h2 {
	line-height: 16pt;
}

h2.spaced {
	margin-top: 2em;
}

.invalid {
	background-color: #ffff00;
}

#warningmessage, .warning {
	background-color: #fff8dd;
	border: 3px solid rgb(125, 85, 0) /* rgb(205, 135, 0) */;
	color: rgb(125, 85, 0);
	font-size: larger;
}

#errormessage p, #warningmessage p, .warning p {
	margin-top: 0.25em;
	margin-bottom: 0.25em;
}

.failure {
	color: red;
	font-weight: bold;
}

.filename {
	font-family: monospace;
}

hr {
	margin-top: 2em;
}

input[type="submit"] {
	font-family: Arial, sans-serif;
	font-size: 18pt;
	font-weight: bold;
	padding-left: 2em;
	padding-right: 2em;
}

.nametable {
	 border: none;
	 border-collapse: collapse;
	 margin: 0em;
	 padding: 0em;
}

.nametable td, .nametable th, td.filename {
	padding-right: 0.5em;
}

#submitarea {
	margin-bottom: 2em;
	margin-top: 2em;
	text-align: center;
}

.surveyarea, .tabcell {
	display: none;
}

th {
	padding-right: 2em;
	text-align: left;
}

/* */
body, html {
	margin: 0;
	padding: 0;
}

.codefile {
	border: 2px solid #2F6FAB;
	margin-bottom: 1em;
	padding: 0;
}

.codefile h2 {
	background-color: #2F6FAB;
	color: white;
	margin: 0;
	padding: 0 0.5em 0.25em;
}

.codefile pre, .codefile xmp {
	background-color: #F9F9F9;
	line-height: 1.05em;
	margin: 0;
	padding: 0.75em;
	overflow: auto;
}

.columnlabel {
	float: left;
	font-weight: bold;
	width: 9em;
}

.errormessage, .warningmessage {
	background-color: #FFEEEE;
	border: 2px dashed red;
	margin-left: 2em;
	margin-right: 2em;
	padding-left: 1em;
	padding-right: 1em;
	padding-top: 0.5em;
	padding-bottom: 0.5em;
}

.errormessage h2, .warningmessage h2 {
	color: red;
	font-size: larger;
}

.errormessage pre {
	font-size: larger;
	font-weight: bold;
}

h1 {
	background-color: #EEEEEE;
	border-bottom: 2px solid gray;
	text-align: center;
}

h1, h2, h3 {
	white-space: nowrap;
}

.info {
	text-align: center;
}

#main {
	padding-left: 1em;
	padding-right: 1em;
}

#studentinfoheader {
	font-size: 12pt;
	font-weight: normal;
	margin-left: auto;
	margin-right: auto;
	min-width: 20em;
	width: 20em;
}

.tooltip {
	background-color: #FFFFAA;
	border: 1px solid #999999;
	margin: 0.5em;
}

.warningmessage {
	background-color: #FFFFDD;
	border: 2px dashed yellow;
	padding-left: 1em;
	padding-right: 1em;
}

/* geshi styles */
.codefile .imp {font-weight: bold; color: red;}
.codefile li, .codefile .li1 {font-weight: normal; vertical-align:top;}
.codefile .ln {width:1px;text-align:right;margin:0;padding:0 2px;vertical-align:top;}
.codefile .li2 {font-weight: bold; vertical-align:top;}
.codefile .kw1 {color: #000088; font-weight: bold;}
.codefile .kw2 {color: #000088; font-weight: bold;}
.codefile .kw1 {color: #000000;  font-weight: bold;}
.codefile .kw2 {color: #000000; font-weight: bold;}
.codefile .kw3 {color: #006600; font-weight: bold;}
.codefile .kw4 {color: #006600; font-weight: bold;}
.codefile .kw5 {color: #003399; font-weight: bold;}
.codefile .kw6 {color: #003399; font-weight: bold;}
.codefile .kw7 {color: #003399; font-weight: bold;}
.codefile .kw8 {color: #003399; font-weight: bold;}
.codefile .kw9 {color: #003399; font-weight: bold;}
.codefile .kw10 {color: #003399; font-weight: bold;}
.codefile .kw11 {color: #003399; font-weight: bold;}
.codefile .kw12 {color: #003399; font-weight: bold;}
.codefile .kw13 {color: #003399; font-weight: bold;}
.codefile .kw14 {color: #003399; font-weight: bold;}
.codefile .kw15 {color: #003399; font-weight: bold;}
.codefile .kw16 {color: #003399; font-weight: bold;}
.codefile .kw17 {color: #003399; font-weight: bold;}
.codefile .kw18 {color: #003399; font-weight: bold;}
.codefile .kw19 {color: #003399; font-weight: bold;}
.codefile .kw20 {color: #003399; font-weight: bold;}
.codefile .kw21 {color: #003399; font-weight: bold;}
.codefile .kw22 {color: #003399; font-weight: bold;}
.codefile .kw23 {color: #003399; font-weight: bold;}
.codefile .kw24 {color: #003399; font-weight: bold;}
.codefile .kw25 {color: #003399; font-weight: bold;}
.codefile .kw26 {color: #003399; font-weight: bold;}
.codefile .kw27 {color: #003399; font-weight: bold;}
.codefile .kw28 {color: #003399; font-weight: bold;}
.codefile .kw29 {color: #003399; font-weight: bold;}
.codefile .kw30 {color: #003399; font-weight: bold;}
.codefile .kw31 {color: #003399; font-weight: bold;}
.codefile .kw32 {color: #003399; font-weight: bold;}
.codefile .kw33 {color: #003399; font-weight: bold;}
.codefile .kw34 {color: #003399; font-weight: bold;}
.codefile .kw35 {color: #003399; font-weight: bold;}
.codefile .kw36 {color: #003399; font-weight: bold;}
.codefile .kw37 {color: #003399; font-weight: bold;}
.codefile .kw38 {color: #003399; font-weight: bold;}
.codefile .kw39 {color: #003399; font-weight: bold;}
.codefile .kw40 {color: #003399; font-weight: bold;}
.codefile .kw41 {color: #003399; font-weight: bold;}
.codefile .kw42 {color: #003399; font-weight: bold;}
.codefile .kw43 {color: #003399; font-weight: bold;}
.codefile .kw44 {color: #003399; font-weight: bold;}
.codefile .kw45 {color: #003399; font-weight: bold;}
.codefile .kw46 {color: #003399; font-weight: bold;}
.codefile .kw47 {color: #003399; font-weight: bold;}
.codefile .kw48 {color: #003399; font-weight: bold;}
.codefile .kw49 {color: #003399; font-weight: bold;}
.codefile .kw50 {color: #003399; font-weight: bold;}
.codefile .kw51 {color: #003399; font-weight: bold;}
.codefile .kw52 {color: #003399; font-weight: bold;}
.codefile .kw53 {color: #003399; font-weight: bold;}
.codefile .kw54 {color: #003399; font-weight: bold;}
.codefile .kw55 {color: #003399; font-weight: bold;}
.codefile .kw56 {color: #003399; font-weight: bold;}
.codefile .kw57 {color: #003399; font-weight: bold;}
.codefile .kw58 {color: #003399; font-weight: bold;}
.codefile .kw59 {color: #003399; font-weight: bold;}
.codefile .kw60 {color: #003399; font-weight: bold;}
.codefile .kw61 {color: #003399; font-weight: bold;}
.codefile .kw62 {color: #003399; font-weight: bold;}
.codefile .kw63 {color: #003399; font-weight: bold;}
.codefile .kw64 {color: #003399; font-weight: bold;}
.codefile .kw65 {color: #003399; font-weight: bold;}
.codefile .kw66 {color: #003399; font-weight: bold;}
.codefile .kw67 {color: #003399; font-weight: bold;}
.codefile .kw68 {color: #003399; font-weight: bold;}
.codefile .kw69 {color: #003399; font-weight: bold;}
.codefile .kw70 {color: #003399; font-weight: bold;}
.codefile .kw71 {color: #003399; font-weight: bold;}
.codefile .kw72 {color: #003399; font-weight: bold;}
.codefile .kw73 {color: #003399; font-weight: bold;}
.codefile .kw74 {color: #003399; font-weight: bold;}
.codefile .kw75 {color: #003399; font-weight: bold;}
.codefile .kw76 {color: #003399; font-weight: bold;}
.codefile .kw77 {color: #003399; font-weight: bold;}
.codefile .kw78 {color: #003399; font-weight: bold;}
.codefile .kw79 {color: #003399; font-weight: bold;}
.codefile .kw80 {color: #003399; font-weight: bold;}
.codefile .kw81 {color: #003399; font-weight: bold;}
.codefile .kw82 {color: #003399; font-weight: bold;}
.codefile .kw83 {color: #003399; font-weight: bold;}
.codefile .kw84 {color: #003399; font-weight: bold;}
.codefile .kw85 {color: #003399; font-weight: bold;}
.codefile .kw86 {color: #003399; font-weight: bold;}
.codefile .kw87 {color: #003399; font-weight: bold;}
.codefile .kw88 {color: #003399; font-weight: bold;}
.codefile .kw89 {color: #003399; font-weight: bold;}
.codefile .kw90 {color: #003399; font-weight: bold;}
.codefile .kw91 {color: #003399; font-weight: bold;}
.codefile .kw92 {color: #003399; font-weight: bold;}
.codefile .kw93 {color: #003399; font-weight: bold;}
.codefile .kw94 {color: #003399; font-weight: bold;}
.codefile .kw95 {color: #003399; font-weight: bold;}
.codefile .kw96 {color: #003399; font-weight: bold;}
.codefile .kw97 {color: #003399; font-weight: bold;}
.codefile .kw98 {color: #003399; font-weight: bold;}
.codefile .kw99 {color: #003399; font-weight: bold;}
.codefile .kw100 {color: #003399; font-weight: bold;}
.codefile .kw101 {color: #003399; font-weight: bold;}
.codefile .kw102 {color: #003399; font-weight: bold;}
.codefile .kw103 {color: #003399; font-weight: bold;}
.codefile .kw104 {color: #003399; font-weight: bold;}
.codefile .kw105 {color: #003399; font-weight: bold;}
.codefile .kw106 {color: #003399; font-weight: bold;}
.codefile .kw107 {color: #003399; font-weight: bold;}
.codefile .kw108 {color: #003399; font-weight: bold;}
.codefile .kw109 {color: #003399; font-weight: bold;}
.codefile .kw110 {color: #003399; font-weight: bold;}
.codefile .kw111 {color: #003399; font-weight: bold;}
.codefile .kw112 {color: #003399; font-weight: bold;}
.codefile .kw113 {color: #003399; font-weight: bold;}
.codefile .kw114 {color: #003399; font-weight: bold;}
.codefile .kw115 {color: #003399; font-weight: bold;}
.codefile .kw116 {color: #003399; font-weight: bold;}
.codefile .kw117 {color: #003399; font-weight: bold;}
.codefile .kw118 {color: #003399; font-weight: bold;}
.codefile .kw119 {color: #003399; font-weight: bold;}
.codefile .kw120 {color: #003399; font-weight: bold;}
.codefile .kw121 {color: #003399; font-weight: bold;}
.codefile .kw122 {color: #003399; font-weight: bold;}
.codefile .kw123 {color: #003399; font-weight: bold;}
.codefile .kw124 {color: #003399; font-weight: bold;}
.codefile .kw125 {color: #003399; font-weight: bold;}
.codefile .kw126 {color: #003399; font-weight: bold;}
.codefile .kw127 {color: #003399; font-weight: bold;}
.codefile .kw128 {color: #003399; font-weight: bold;}
.codefile .kw129 {color: #003399; font-weight: bold;}
.codefile .kw130 {color: #003399; font-weight: bold;}
.codefile .kw131 {color: #003399; font-weight: bold;}
.codefile .kw132 {color: #003399; font-weight: bold;}
.codefile .kw133 {color: #003399; font-weight: bold;}
.codefile .kw134 {color: #003399; font-weight: bold;}
.codefile .kw135 {color: #003399; font-weight: bold;}
.codefile .kw136 {color: #003399; font-weight: bold;}
.codefile .kw137 {color: #003399; font-weight: bold;}
.codefile .kw138 {color: #003399; font-weight: bold;}
.codefile .kw139 {color: #003399; font-weight: bold;}
.codefile .kw140 {color: #003399; font-weight: bold;}
.codefile .kw141 {color: #003399; font-weight: bold;}
.codefile .kw142 {color: #003399; font-weight: bold;}
.codefile .kw143 {color: #003399; font-weight: bold;}
.codefile .kw144 {color: #003399; font-weight: bold;}
.codefile .kw145 {color: #003399; font-weight: bold;}
.codefile .kw146 {color: #003399; font-weight: bold;}
.codefile .kw147 {color: #003399; font-weight: bold;}
.codefile .kw148 {color: #003399; font-weight: bold;}
.codefile .kw149 {color: #003399; font-weight: bold;}
.codefile .kw150 {color: #003399; font-weight: bold;}
.codefile .kw151 {color: #003399; font-weight: bold;}
.codefile .kw152 {color: #003399; font-weight: bold;}
.codefile .kw153 {color: #003399; font-weight: bold;}
.codefile .kw154 {color: #003399; font-weight: bold;}
.codefile .kw155 {color: #003399; font-weight: bold;}
.codefile .kw156 {color: #003399; font-weight: bold;}
.codefile .kw157 {color: #003399; font-weight: bold;}
.codefile .kw158 {color: #003399; font-weight: bold;}
.codefile .kw159 {color: #003399; font-weight: bold;}
.codefile .kw160 {color: #003399; font-weight: bold;}
.codefile .kw161 {color: #003399; font-weight: bold;}
.codefile .kw162 {color: #003399; font-weight: bold;}
.codefile .kw163 {color: #003399; font-weight: bold;}
.codefile .kw164 {color: #003399; font-weight: bold;}
.codefile .kw165 {color: #003399; font-weight: bold;}
.codefile .kw166 {color: #003399; font-weight: bold;}
.codefile .co1,
.codefile .co2,
.codefile .co3,
.codefile .coMULTI {color: #a1a100;}

/*
.codefile .co2 {color: #ff0000; font-style: italic;}
.codefile .co3 {color: #008000; font-style: italic;}
.codefile .coMULTI {color: #808080; font-style: italic;}
*/
.codefile .es0 {color: #000099; font-weight: bold;}
.codefile .es2 {color: #000099; font-weight: bold;}
.codefile .br0 {color: #00AA00;}
.codefile .sy0 {color: #00AA00;}
.codefile .st0 {color: #aa0000;}
.codefile .nu0 {color: #cc66cc;}
.codefile .re0 {color: #cc00cc;}
.codefile .re1 {color: #6666ff;}
.codefile .re2 {color: #3333ff;}
.codefile .re3 {color: #933;}
.codefile .ln-xtra, .codefile li.ln-xtra, .codefile div.ln-xtra {background-color: #ffc;}
.codefile span.xtra { display:block; }
.codefile .sc-2 {color: #404040;}
.codefile .sc-1 {color: #808080; font-style: italic;}
.codefile .sc0 {color: #00bbdd;}
.codefile .sc1 {color: #ddbb00;}
.codefile .sc2 {color: #009900;}
		</style>

		<style type="text/css" media="print">
.codefile {
	border: 1px dashed #2F6FAB;
}

.codefile pre, .codefile xmp {
	font-size: 9pt;
	letter-spacing: -0.5pt;
	line-height: 1em;
	margin: 0;
	padding: 0.25em;
	overflow: hidden;
}

.saveforyourrecords, .tooltip {
	display: none;
}
		</style>
	<style type="text/css"></style></head>

	<body class=" hasGoogleVoiceExt">
		<h1>Homework Turnin</h1>


<div id="main">
	<h2 id="studentinfoheader">
		<span class="columnlabel">Name:</span>
		Shawn		William		Stern		<br>

		<span class="columnlabel">Email:</span>
		swstern@uw.edu		<br>
		
					<span class="columnlabel">Student ID:</span>
			0921475			<br>
		
					<span class="columnlabel">Section:</span>
			A			<br>
		
		<span class="columnlabel">Course:</span>
		CSE 		373		12sp		<br>

		<span class="columnlabel">Assignment:</span>
		hw7_1_2	</h2>


	<h2 id="studentinfoheader">
		<span class="columnlabel">Receipt ID:</span>
		df68aaaf5594984ccc6d9cec36ae393d	</h2>

	
	<p>
		Replacing prior submission from Wed 2012/05/30 11:43am.
	</p>
	
	
<!--
<div class="warning">
	NOTE: Emailed receipts temporarily disabled because of a server problem.  Please save a copy of this web page because you won't be receiving a receipt email.
</div>
-->

	
	<h3 class="success">Turnin Successful!</h3>

	<p class="saveforyourrecords">
		Please <strong style="color: #090; background-color: #ffb">save or print a copy of this page</strong> for your records.  A receipt has also been emailed to you, but you should still save or print a copy of this web page to make certain that you have proof of your turnin.  <strong>If your files become lost or damaged and you do not have any record of your receipt, we will not be able to give you any credit for your work.</strong>
	</p>
	
		
	<p>
		The following file(s) were received:
	</p>

	

		<div class="codefile">
			<h2>
				SearchableGraph.java &nbsp; &nbsp; 
				<span class="aside">(5922 bytes)</span>
			</h2>
			
			<pre><pre class="java5"><span class="kw2">import</span> <span class="co2">java.util.*</span><span class="sy0">;</span>
&nbsp;
<span class="co1">//Shawn Stern - 0921475 - CSE 373, Spring 2012 - Homework 7 Step 1</span>
&nbsp;
<span class="kw2">public</span> <span class="kw2">class</span> SearchableGraph<span class="sy0">&lt;</span>V, E<span class="sy0">&gt;</span> <span class="kw2">extends</span> Graph<span class="sy0">&lt;</span>V, E<span class="sy0">&gt;</span> <span class="kw2">implements</span> ISearchableGraph<span class="sy0">&lt;</span>V, E<span class="sy0">&gt;</span> <span class="br0">{</span>
&nbsp;
    <span class="co1">// Returns the path from v1 to v2 that has the lowest possible path weight, as a list. </span>
    <span class="co1">// Returns a one-element list containing only v1 if the path from v1 to itself is</span>
    <span class="co1">// requested. If v2 is not reachable from v2, returns null.</span>
    <span class="co1">// If either vertex is null, throws a NullPointerException.</span>
    <span class="co1">// If either vertex is not in the graph, throws an IllegalArgumentException.</span>
    <span class="kw2">public</span> <span class="kw166">List</span><span class="sy0">&lt;</span>V<span class="sy0">&gt;</span> minimumWeightPath<span class="br0">(</span>V v1, V v2<span class="br0">)</span> <span class="br0">{</span>
        <span class="co1">// Check vertices and throw exceptions as needed.</span>
        checkVertices<span class="br0">(</span>v1, v2<span class="br0">)</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// Reset the vertexInfo before each use of the algorithm.</span>
        clearVertexInfo<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>  
&nbsp;
        <span class="co1">// Set starting location to distance 0.</span>
        vertexInfo.<span class="me1">get</span><span class="br0">(</span>v1<span class="br0">)</span>.<span class="me1">distance</span> = <span class="nu0">0</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// Make a new ArrayList, and populate it with the graph's vertices.</span>
        <span class="kw166">List</span><span class="sy0">&lt;</span>V<span class="sy0">&gt;</span> vertices = <span class="kw2">new</span> <span class="kw46">ArrayList</span><span class="sy0">&lt;</span>V<span class="sy0">&gt;</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
        vertices.<span class="me1">addAll</span><span class="br0">(</span>vertices<span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
&nbsp;
        <span class="kw1">while</span> <span class="br0">(</span><span class="sy0">!</span>vertices.<span class="me1">isEmpty</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
            <span class="co1">// Look through the vertices to find the vertex with minimum distance.</span>
            V v = vertices.<span class="me1">get</span><span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span><span class="sy0">;</span>
            <span class="kw1">for</span> <span class="br0">(</span>V temp : vertices<span class="br0">)</span> <span class="br0">{</span>
                <span class="kw1">if</span> <span class="br0">(</span>distance<span class="br0">(</span>temp<span class="br0">)</span> <span class="sy0">&lt;</span>= distance<span class="br0">(</span>v<span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
                    v = temp<span class="sy0">;</span>
                <span class="br0">}</span>
            <span class="br0">}</span>
&nbsp;
            <span class="co1">// We have the vertex with min distance; remove it, set as visited, and proceed.</span>
            vertices.<span class="me1">remove</span><span class="br0">(</span>v<span class="br0">)</span><span class="sy0">;</span>
            vertexInfo.<span class="me1">get</span><span class="br0">(</span>v<span class="br0">)</span>.<span class="me1">visited</span> = <span class="kw4">true</span><span class="sy0">;</span>
&nbsp;
            <span class="kw1">for</span> <span class="br0">(</span>V n : neighbors<span class="br0">(</span>v<span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
                <span class="co1">// If not visited...</span>
                <span class="kw1">if</span> <span class="br0">(</span><span class="sy0">!</span>vertexInfo.<span class="me1">get</span><span class="br0">(</span>n<span class="br0">)</span>.<span class="me1">visited</span><span class="br0">)</span> <span class="br0">{</span>
                    <span class="co1">// Get the weight of the edge from n to v.</span>
                    <span class="kw3">int</span> edgeWeight = adjacencyMap.<span class="me1">get</span><span class="br0">(</span>v<span class="br0">)</span>.<span class="me1">get</span><span class="br0">(</span>n<span class="br0">)</span>.<span class="me1">weight</span><span class="sy0">;</span>
&nbsp;
                    <span class="co1">// Store the current value of n's distance for comparison later.</span>
                    <span class="kw3">int</span> currDistOfN = distance<span class="br0">(</span>n<span class="br0">)</span><span class="sy0">;</span>
&nbsp;
                    <span class="co1">// N's new distance is equal to least's distance + weight of edge from n to v.</span>
                    <span class="kw3">int</span> newDistOfN = distance<span class="br0">(</span>v<span class="br0">)</span> + edgeWeight<span class="sy0">;</span>
&nbsp;
                    <span class="kw1">if</span> <span class="br0">(</span>newDistOfN <span class="sy0">&lt;</span> currDistOfN<span class="br0">)</span> <span class="br0">{</span>
                        vertexInfo.<span class="me1">get</span><span class="br0">(</span>n<span class="br0">)</span>.<span class="me1">distance</span> = newDistOfN<span class="sy0">;</span>
                        vertexInfo.<span class="me1">get</span><span class="br0">(</span>n<span class="br0">)</span>.<span class="me1">previous</span> = v<span class="sy0">;</span>
                    <span class="br0">}</span>
                <span class="br0">}</span>
            <span class="br0">}</span>
        <span class="br0">}</span>
&nbsp;
        <span class="co1">// Return the path</span>
        <span class="kw2">return</span> pathConstruct<span class="br0">(</span>v1, v2<span class="br0">)</span><span class="sy0">;</span>
    <span class="br0">}</span>
&nbsp;
    <span class="co1">// Returns the path from v1 to v2 that contains the fewest vertices. Requesting a path</span>
    <span class="co1">// from v1 to v1 will return a one-element list containing only v1. </span>
    <span class="co1">// If either vertex is null, throws a NullPointerException.</span>
    <span class="co1">// If either vertex is not in the graph, throws an IllegalArgumentException.</span>
    <span class="kw2">public</span> <span class="kw166">List</span><span class="sy0">&lt;</span>V<span class="sy0">&gt;</span> shortestPath<span class="br0">(</span>V v1, V v2<span class="br0">)</span> <span class="br0">{</span>
        <span class="co1">// Check vertices and throw exceptions as needed.</span>
        checkVertices<span class="br0">(</span>v1, v2<span class="br0">)</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// Reset the vertexInfo before each use of the algorithm.</span>
        clearVertexInfo<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>      
&nbsp;
        <span class="co1">// Make a new list to store the BFS path, and insert v1.</span>
        <span class="kw166">List</span><span class="sy0">&lt;</span>V<span class="sy0">&gt;</span> path = <span class="kw2">new</span> <span class="kw46">ArrayList</span><span class="sy0">&lt;</span>V<span class="sy0">&gt;</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
        path.<span class="me1">add</span><span class="br0">(</span>v1<span class="br0">)</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// Visit v1</span>
        vertexInfo.<span class="me1">get</span><span class="br0">(</span>v1<span class="br0">)</span>.<span class="me1">visited</span> = <span class="kw4">true</span><span class="sy0">;</span>
&nbsp;
        <span class="kw1">while</span> <span class="br0">(</span><span class="sy0">!</span>path.<span class="me1">isEmpty</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
            V v = path.<span class="me1">remove</span><span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span><span class="sy0">;</span>
            <span class="kw1">if</span> <span class="br0">(</span>v.<span class="me1">equals</span><span class="br0">(</span>v2<span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
                <span class="co1">// Path found. </span>
                <span class="co1">// reconstruct path from v2 back to v1, following previous pointers.</span>
                <span class="kw2">return</span> pathConstruct<span class="br0">(</span>v1, v2<span class="br0">)</span><span class="sy0">;</span>
            <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span>
                <span class="co1">// Visit each unvisited neighbor, set v as it's previous, and add it to </span>
                <span class="co1">// the list so we can do a broader search.</span>
                <span class="kw1">for</span> <span class="br0">(</span>V n : neighbors<span class="br0">(</span>v<span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
                    <span class="kw1">if</span> <span class="br0">(</span><span class="sy0">!</span>vertexInfo.<span class="me1">get</span><span class="br0">(</span>n<span class="br0">)</span>.<span class="me1">visited</span><span class="br0">)</span> <span class="br0">{</span>
                        vertexInfo.<span class="me1">get</span><span class="br0">(</span>n<span class="br0">)</span>.<span class="me1">visited</span> = <span class="kw4">true</span><span class="sy0">;</span>
                        vertexInfo.<span class="me1">get</span><span class="br0">(</span>n<span class="br0">)</span>.<span class="me1">previous</span> = v<span class="sy0">;</span>
                        path.<span class="me1">add</span><span class="br0">(</span>n<span class="br0">)</span><span class="sy0">;</span>
                    <span class="br0">}</span>                   
                <span class="br0">}</span>
            <span class="br0">}</span>           
        <span class="br0">}</span>   
&nbsp;
        <span class="co1">// If we get to this point, no path: return null.</span>
        <span class="kw2">return</span> <span class="kw4">null</span><span class="sy0">;</span>
    <span class="br0">}</span>
&nbsp;
    <span class="co1">// Returns if there is a path between v1 and v2. A vertex can reach itself.</span>
    <span class="co1">// If either vertex is null, throws a NullPointerException.</span>
    <span class="co1">// If either vertex is not in the graph, throws an IllegalArgumentException.</span>
    <span class="kw2">public</span> <span class="kw3">boolean</span> reachable<span class="br0">(</span>V v1, V v2<span class="br0">)</span> <span class="br0">{</span>
        <span class="co1">// The runtime of a BFS is O(|V| + |E|) and the runtime of reachable should also </span>
        <span class="co1">// be O(|V| + |E|), so why not just use the code I've already written!?</span>
        <span class="co1">// Also, ternary for added allure. :)</span>
        <span class="kw2">return</span> <span class="br0">(</span>shortestPath<span class="br0">(</span>v1, v2<span class="br0">)</span> == <span class="kw4">null</span><span class="br0">)</span> <span class="sy0">?</span> <span class="kw4">false</span> : <span class="kw4">true</span><span class="sy0">;</span>
    <span class="br0">}</span>
&nbsp;
    <span class="co1">// ---------- Private Helper Methods ---------- //</span>
&nbsp;
    <span class="co1">// Construct the path from v2 to v1 and return as a linked list.</span>
    <span class="kw2">private</span> <span class="kw166">List</span><span class="sy0">&lt;</span>V<span class="sy0">&gt;</span> pathConstruct<span class="br0">(</span>V v1, V v2<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw46">LinkedList</span><span class="sy0">&lt;</span>V<span class="sy0">&gt;</span> path = <span class="kw2">new</span> <span class="kw46">LinkedList</span><span class="sy0">&lt;</span>V<span class="sy0">&gt;</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
        path.<span class="me1">addFirst</span><span class="br0">(</span>v2<span class="br0">)</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// Return path in its current state if v1 = v2.</span>
        <span class="kw1">if</span> <span class="br0">(</span>v2.<span class="me1">equals</span><span class="br0">(</span>v1<span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
            <span class="kw2">return</span> path<span class="sy0">;</span> 
        <span class="br0">}</span>       
&nbsp;
        <span class="co1">// Temporary variable to go backwards through the graph</span>
        V curr = v2<span class="sy0">;</span>
&nbsp;
        <span class="kw1">if</span> <span class="br0">(</span><span class="sy0">!</span>v2.<span class="me1">equals</span><span class="br0">(</span>v1<span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
            <span class="co1">// While there is still a previous V, add it to the front of the path list and </span>
            <span class="co1">// move on to the next one.</span>
            <span class="kw1">while</span> <span class="br0">(</span>vertexInfo.<span class="me1">get</span><span class="br0">(</span>curr<span class="br0">)</span>.<span class="me1">previous</span> <span class="sy0">!</span>= <span class="kw4">null</span><span class="br0">)</span> <span class="br0">{</span>
                path.<span class="me1">addFirst</span><span class="br0">(</span>vertexInfo.<span class="me1">get</span><span class="br0">(</span>curr<span class="br0">)</span>.<span class="me1">previous</span><span class="br0">)</span><span class="sy0">;</span>
                <span class="co1">// Line for debugging</span>
                <span class="co1">// System.out.println(path);</span>
                curr = vertexInfo.<span class="me1">get</span><span class="br0">(</span>curr<span class="br0">)</span>.<span class="me1">previous</span><span class="sy0">;</span>           
            <span class="br0">}</span>       
        <span class="br0">}</span>
&nbsp;
        <span class="kw2">return</span> path<span class="sy0">;</span>
    <span class="br0">}</span>
&nbsp;
    <span class="co1">// Returns the distance value of the given vertex, improves code readability.</span>
    <span class="kw2">private</span> <span class="kw3">int</span> distance<span class="br0">(</span>V v<span class="br0">)</span> <span class="br0">{</span>
        <span class="kw2">return</span> vertexInfo.<span class="me1">get</span><span class="br0">(</span>v<span class="br0">)</span>.<span class="me1">distance</span><span class="sy0">;</span>
    <span class="br0">}</span>
<span class="br0">}</span>
&nbsp;</pre></pre>
		</div>

		
		<div class="codefile">
			<h2>
				KevinBacon.java &nbsp; &nbsp; 
				<span class="aside">(4350 bytes)</span>
			</h2>
			
			<pre><pre class="java5"><span class="kw2">import</span> <span class="co2">java.util.*</span><span class="sy0">;</span>
<span class="kw2">import</span> <span class="co2">java.io.*</span><span class="sy0">;</span>
&nbsp;
<span class="kw2">public</span> <span class="kw2">class</span> KevinBacon <span class="br0">{</span>
    <span class="co1">// Because you guys love global variables.</span>
    <span class="kw2">public</span> <span class="kw2">static</span> <span class="kw2">final</span> <span class="kw21">String</span> BACON = <span class="st0">"Kevin Bacon"</span><span class="sy0">;</span> 
&nbsp;
    <span class="kw2">public</span> <span class="kw2">static</span> <span class="kw3">void</span> main<span class="br0">(</span><span class="kw21">String</span><span class="br0">[</span><span class="br0">]</span> args<span class="br0">)</span> <span class="kw2">throws</span> <span class="kw20">FileNotFoundException</span> <span class="br0">{</span>
        <span class="co1">// Build graph of actors and their connections</span>
        ISearchableGraph<span class="sy0">&lt;</span><span class="kw21">String</span>, <span class="kw21">String</span><span class="sy0">&gt;</span> graph = buildGraph<span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// Print out the intro text and user prompt</span>
        <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"Welcome to the Six Degrees of Kevin Bacon."</span><span class="br0">)</span><span class="sy0">;</span>
        <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"If you tell me an actor's name, I'll connect them "</span> +
                <span class="st0">"to Kevin Bacon through"</span><span class="br0">)</span><span class="sy0">;</span>
        <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"the movies they've appeared in.  "</span> +
                <span class="st0">"I bet your actor has a Kevin Bacon number"</span><span class="br0">)</span><span class="sy0">;</span>
        <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"of less than six!"</span><span class="br0">)</span><span class="sy0">;</span>
        <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
        <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">print</span><span class="br0">(</span><span class="st0">"Actor's name (or ALL for everyone)? "</span><span class="br0">)</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// Make scanner and store user input</span>
        <span class="kw46">Scanner</span> console = <span class="kw2">new</span> <span class="kw46">Scanner</span><span class="br0">(</span><span class="kw21">System</span>.<span class="me1">in</span><span class="br0">)</span><span class="sy0">;</span>
        <span class="kw21">String</span> actor = console.<span class="me1">nextLine</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// Print output</span>
        printBacon<span class="br0">(</span>actor, graph<span class="br0">)</span><span class="sy0">;</span>
    <span class="br0">}</span>
&nbsp;
    <span class="co1">// Instructor code</span>
    <span class="kw2">public</span> <span class="kw2">static</span> ISearchableGraph<span class="sy0">&lt;</span><span class="kw21">String</span>, <span class="kw21">String</span><span class="sy0">&gt;</span> buildGraph<span class="br0">(</span><span class="br0">)</span> <span class="kw2">throws</span> <span class="kw20">FileNotFoundException</span> <span class="br0">{</span>
        <span class="kw46">Scanner</span> input = <span class="kw2">new</span> <span class="kw46">Scanner</span><span class="br0">(</span><span class="kw2">new</span> <span class="kw20">File</span><span class="br0">(</span><span class="st0">"movies.txt"</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
        ISearchableGraph<span class="sy0">&lt;</span><span class="kw21">String</span>, <span class="kw21">String</span><span class="sy0">&gt;</span> graph = <span class="kw2">new</span> SearchableGraph<span class="sy0">&lt;</span><span class="kw21">String</span>, <span class="kw21">String</span><span class="sy0">&gt;</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
&nbsp;
        <span class="kw1">while</span> <span class="br0">(</span>input.<span class="me1">hasNextLine</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
            <span class="kw46">Scanner</span> line = <span class="kw2">new</span> <span class="kw46">Scanner</span><span class="br0">(</span>input.<span class="me1">nextLine</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span>.<span class="me1">useDelimiter</span><span class="br0">(</span><span class="st0">";"</span><span class="br0">)</span><span class="sy0">;</span>
&nbsp;
            <span class="kw21">String</span> movie = line.<span class="me1">next</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
&nbsp;
            <span class="co1">// get all of the actors in the movie</span>
            <span class="kw166">List</span><span class="sy0">&lt;</span><span class="kw21">String</span><span class="sy0">&gt;</span> actors = <span class="kw2">new</span> <span class="kw46">ArrayList</span><span class="sy0">&lt;</span><span class="kw21">String</span><span class="sy0">&gt;</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
            <span class="kw1">while</span> <span class="br0">(</span>line.<span class="me1">hasNext</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
                <span class="kw21">String</span> actor = line.<span class="me1">next</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
                graph.<span class="me1">addVertex</span><span class="br0">(</span>actor<span class="br0">)</span><span class="sy0">;</span>
                actors.<span class="me1">add</span><span class="br0">(</span>actor<span class="br0">)</span><span class="sy0">;</span>
            <span class="br0">}</span>
&nbsp;
            <span class="co1">// connect all of the actors</span>
            <span class="kw1">for</span> <span class="br0">(</span><span class="kw3">int</span> i = <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> actors.<span class="me1">size</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span> i++<span class="br0">)</span> <span class="br0">{</span>
                <span class="kw1">for</span> <span class="br0">(</span><span class="kw3">int</span> j = <span class="nu0">1</span><span class="sy0">;</span> j <span class="sy0">&lt;</span> actors.<span class="me1">size</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span> j++<span class="br0">)</span> <span class="br0">{</span>
                    graph.<span class="me1">addEdge</span><span class="br0">(</span>actors.<span class="me1">get</span><span class="br0">(</span>i<span class="br0">)</span>, actors.<span class="me1">get</span><span class="br0">(</span>j<span class="br0">)</span>, movie<span class="br0">)</span><span class="sy0">;</span>
                <span class="br0">}</span>
            <span class="br0">}</span>
&nbsp;
        <span class="br0">}</span>
&nbsp;
        <span class="kw2">return</span> graph<span class="sy0">;</span>
    <span class="br0">}</span>
&nbsp;
    <span class="co1">// Print bacon chunks about actors </span>
    <span class="kw2">private</span> <span class="kw2">static</span> <span class="kw3">void</span> printBacon<span class="br0">(</span><span class="kw21">String</span> actor, ISearchableGraph<span class="sy0">&lt;</span><span class="kw21">String</span>, <span class="kw21">String</span><span class="sy0">&gt;</span> graph<span class="br0">)</span> <span class="br0">{</span>
        <span class="co1">// Print output based on input</span>
        <span class="kw1">if</span> <span class="br0">(</span>actor.<span class="me1">equalsIgnoreCase</span><span class="br0">(</span><span class="st0">"all"</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
            <span class="co1">// Go through all actors</span>
            <span class="kw21">Boolean</span> firstLine = <span class="kw4">true</span><span class="sy0">;</span>
            <span class="kw1">for</span> <span class="br0">(</span><span class="kw21">String</span> v : graph.<span class="me1">vertices</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
                <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
                printHelper<span class="br0">(</span>v, graph, graph.<span class="me1">shortestPath</span><span class="br0">(</span>v, BACON<span class="br0">)</span>, firstLine<span class="br0">)</span><span class="sy0">;</span>
                firstLine = <span class="kw4">false</span><span class="sy0">;</span>
            <span class="br0">}</span>
        <span class="br0">}</span> <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">(</span><span class="sy0">!</span>graph.<span class="me1">containsVertex</span><span class="br0">(</span>actor<span class="br0">)</span> || <span class="sy0">!</span>graph.<span class="me1">reachable</span><span class="br0">(</span>actor, BACON<span class="br0">)</span><span class="br0">)</span><span class="br0">{</span>
            <span class="co1">// Cases when actor isn't real or if there's no path from bacon to the actor.</span>
            printHelper<span class="br0">(</span>actor, graph, <span class="kw4">null</span>, <span class="kw4">false</span><span class="br0">)</span><span class="sy0">;</span>         
        <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span>
            <span class="co1">// Otherwise, just do the one actor.</span>
            printHelper<span class="br0">(</span>actor, graph, graph.<span class="me1">shortestPath</span><span class="br0">(</span>actor, BACON<span class="br0">)</span>, <span class="kw4">false</span><span class="br0">)</span><span class="sy0">;</span>
        <span class="br0">}</span>
    <span class="br0">}</span>
&nbsp;
    <span class="co1">// Helper to print information about an actor's baconness.</span>
    <span class="kw2">private</span> <span class="kw2">static</span> <span class="kw3">void</span> printHelper<span class="br0">(</span><span class="kw21">String</span> actor, ISearchableGraph<span class="sy0">&lt;</span><span class="kw21">String</span>, <span class="kw21">String</span><span class="sy0">&gt;</span> graph, 
            <span class="kw166">List</span><span class="sy0">&lt;</span><span class="kw21">String</span><span class="sy0">&gt;</span> path, <span class="kw21">Boolean</span> firstLine<span class="br0">)</span> <span class="br0">{</span>
        <span class="co1">// Only print this line for normal lines of output (avoids fencepost)</span>
        <span class="kw1">if</span> <span class="br0">(</span><span class="sy0">!</span>firstLine<span class="br0">)</span> <span class="br0">{</span>
            <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>
        <span class="br0">}</span>
&nbsp;
        <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span><span class="st0">"Path from "</span> + actor + <span class="st0">" to "</span> + BACON + <span class="st0">":"</span><span class="br0">)</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// Handle error messages, particularly useful for 'ALL' case</span>
        <span class="kw1">if</span> <span class="br0">(</span><span class="sy0">!</span>graph.<span class="me1">containsVertex</span><span class="br0">(</span>actor<span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
            <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">print</span><span class="br0">(</span><span class="st0">"No such actor."</span><span class="br0">)</span><span class="sy0">;</span>
            <span class="kw2">return</span><span class="sy0">;</span>
        <span class="br0">}</span> <span class="kw1">else</span> <span class="kw1">if</span> <span class="br0">(</span><span class="sy0">!</span>graph.<span class="me1">reachable</span><span class="br0">(</span>actor, BACON<span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span>
            <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">print</span><span class="br0">(</span><span class="st0">"No path found."</span><span class="br0">)</span><span class="sy0">;</span>
            <span class="kw2">return</span><span class="sy0">;</span>
        <span class="br0">}</span>
&nbsp;
        <span class="co1">// Store the bacon number for later, since we dismantle the list next.</span>
        <span class="kw3">int</span> baconNum = path.<span class="me1">size</span><span class="br0">(</span><span class="br0">)</span> - <span class="nu0">1</span><span class="sy0">;</span>
&nbsp;
        <span class="co1">// Print out the meat of the bacon block.</span>
        <span class="kw1">while</span><span class="br0">(</span>path.<span class="me1">size</span><span class="br0">(</span><span class="br0">)</span> <span class="sy0">&gt;</span> <span class="nu0">1</span><span class="br0">)</span> <span class="br0">{</span>
            <span class="co1">// Print their relationship</span>
            <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span>path.<span class="me1">get</span><span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span> + <span class="st0">" was in "</span> + graph.<span class="me1">edge</span><span class="br0">(</span>path.<span class="me1">get</span><span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span>, path.<span class="me1">get</span><span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span> + 
                    <span class="st0">" with "</span> + path.<span class="me1">get</span><span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span>
            path.<span class="me1">remove</span><span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span><span class="sy0">;</span>
        <span class="br0">}</span>
&nbsp;
        <span class="co1">// Print out the Bacon number</span>
        <span class="kw21">System</span>.<span class="me1">out</span>.<span class="me1">print</span><span class="br0">(</span>actor + <span class="st0">"'s Bacon number is "</span> + baconNum<span class="br0">)</span><span class="sy0">;</span>
    <span class="br0">}</span>
<span class="br0">}</span></pre></pre>
		</div>

		
</div>


	<div id="loading">One moment...</div>
	<pre id="dumptarget"></pre>
	
	
	

	<div id="tc_container" style="display: none" data="ih"></div><style id="_clearly_component__css" type="text/css">#next_pages_container { width: 5px; hight: 5px; position: absolute; top: -100px; left: -100px; z-index: 2147483647 !important; } </style><div id="_clearly_component__next_pages_container"></div></body></html>